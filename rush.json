/**
 * This is the main configuration file for Rush.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",
  "rushVersion": "5.138.0",
  "pnpmVersion": "8.15.8",
  // "npmVersion": "6.14.15",
  // "yarnVersion": "1.9.4",
  "nodeSupportedVersionRange": ">=18.20.3 <19.0.0 || >=20.14.0 <21.0.0",
  // "nodeSupportedVersionInstructions": "Run 'nvs use' to switch to the expected node version.",
  // "suppressNodeLtsWarning": false,
  // "suppressRushIsPublicVersionCheck": false,
  // "projectFolderMinDepth": 2,
  // "projectFolderMaxDepth": 2,
  // "allowMostlyStandardPackageNames": true,
  "approvedPackagesPolicy": {
  //   /**
  //    * The review categories allow you to say for example "This library is approved for usage
  //    * in prototypes, but not in production code."
  //    *
  //    * Each project can be associated with one review category, by assigning the "reviewCategory" field
  //    * in the "projects" section of rush.json.  The approval is then recorded in the files
  //    * "common/config/rush/browser-approved-packages.json" and "nonbrowser-approved-packages.json"
  //    * which are automatically generated during "rush update".
  //    *
  //    * Designate categories with whatever granularity is appropriate for your review process,
  //    * or you could just have a single category called "default".
  //    */
  //   "reviewCategories": [
  //     // Some example categories:
  //     "production", // projects that ship to production
  //     "tools",      // non-shipping projects that are part of the developer toolchain
  //     "prototypes"  // experiments that should mostly be ignored by the review process
  //   ],
  // 
  //   /**
  //    * A list of NPM package scopes that will be excluded from review.
  //    * We recommend to exclude TypeScript typings (the "@types" scope), because
  //    * if the underlying package was already approved, this would imply that the typings
  //    * are also approved.
  //    */
  //   // "ignoredNpmScopes": ["@types"]
  // },

  /**
   * If you use Git as your version control system, this section has some additional
   * optional features you can use.
   */
  "gitPolicy": {
    /**
     * Work at a big company?  Tired of finding Git commits at work with unprofessional Git
     * emails such as "beer-lover@my-college.edu"?  Rush can validate people's Git email address
     * before they get started.
     *
     * Define a list of regular expressions describing allowable e-mail patterns for Git commits.
     * They are case-insensitive anchored JavaScript RegExps.  Example: ".*@example\.com"
     *
     * IMPORTANT: Because these are regular expressions encoded as JSON string literals,
     * RegExp escapes need two backslashes, and ordinary periods should be "\\.".
     */
    // "allowedEmailRegExps": [
    //   "[^@]+@users\\.noreply\\.github\\.com",
    //   "rush-bot@example\\.org"
    // ],

    /**
     * When Rush reports that the address is malformed, the notice can include an example
     * of a recommended email.  Make sure it conforms to one of the allowedEmailRegExps
     * expressions.
     */
    // "sampleEmail": "example@users.noreply.github.com",

    /**
     * The commit message to use when committing changes during 'rush publish'.
     *
     * For example, if you want to prevent these commits from triggering a CI build,
     * you might configure your system's trigger to look for a special string such as "[skip-ci]"
     * in the commit message, and then customize Rush's message to contain that string.
     */
    // "versionBumpCommitMessage": "Bump versions [skip ci]",

    /**
     * The commit message to use when committing changes during 'rush version'.
     *
     * For example, if you want to prevent these commits from triggering a CI build,
     * you might configure your system's trigger to look for a special string such as "[skip-ci]"
     * in the commit message, and then customize Rush's message to contain that string.
     */
    // "changeLogUpdateCommitMessage": "Update changelogs [skip ci]",

    /**
     * The commit message to use when committing changefiles during 'rush change --commit'
     *
     * If no commit message is set it will default to 'Rush change'
     */
     // "changefilesCommitMessage": "Rush change"
  },

  "repository": {
    /**
     * The URL of this Git repository, used by "rush change" to determine the base branch for your PR.
     *
     * The "rush change" command needs to determine which files are affected by your PR diff.
     * If you merged or cherry-picked commits from the main branch into your PR branch, those commits
     * should be excluded from this diff (since they belong to some other PR).  In order to do that,
     * Rush needs to know where to find the base branch for your PR.  This information cannot be
     * determined from Git alone, since the "pull request" feature is not a Git concept.  Ideally
     * Rush would use a vendor-specific protocol to query the information from GitHub, Azure DevOps, etc.
     * But to keep things simple, "rush change" simply assumes that your PR is against the "main" branch
     * of the Git remote indicated by the repository.url setting in rush.json.  If you are working in
     * a GitHub "fork" of the real repo, this setting will be different from the repository URL of your
     * your PR branch, and in this situation "rush change" will also automatically invoke "git fetch"
     * to retrieve the latest activity for the remote main branch.
     */
    // "url": "https://github.com/microsoft/rush-example",

    /**
     * The default branch name. This tells "rush change" which remote branch to compare against.
     * The default value is "main"
     */
    // "defaultBranch": "main",

    /**
     * The default remote. This tells "rush change" which remote to compare against if the remote URL is
     * not set or if a remote matching the provided remote URL is not found.
     */
    // "defaultRemote": "origin"
  },
  "eventHooks": {
    "preRushInstall": [
      // "common/scripts/pre-rush-install.js"
    ],
    "postRushInstall": [],
    "preRushBuild": [],
    "postRushBuild": [],
    "preRushx": [],
    "postRushx": []
  },

  /**
   * Installation variants allow you to maintain a parallel set of configuration files that can be
   * used to build the entire monorepo with an alternate set of dependencies.  For example, suppose
   * you upgrade all your projects to use a new release of an important framework, but during a transition period
   * you intend to maintain compatibility with the old release.  In this situation, you probably want your
   * CI validation to build the entire repo twice: once with the old release, and once with the new release.
   *
   * Rush "installation variants" correspond to sets of config files located under this folder:
   *
   *   common/config/rush/variants/<variant_name>
   *
   * The variant folder can contain an alternate common-versions.json file.  Its "preferredVersions" field can be used
   * to select older versions of dependencies (within a loose SemVer range specified in your package.json files).
   * To install a variant, run "rush install --variant <variant_name>".
   *
   * For more details and instructions, see this article:  https://rushjs.io/pages/advanced/installation_variants/
   */
   "variants": [
    // {
    //   "variantName": "old-sdk",
    //   "description": "Build this repo using the previous release of the SDK"
    // }
  ],
  // "telemetryEnabled": false,
  // "hotfixChangeEnabled": false,
  // "allowedProjectTags": [ "tools", "frontend-team", "1.0.0-release" ],

  "projects": [
    {
      "packageName": "english",
      "projectFolder": "apps/english",
      "reviewCategory": "production"
    },
    {
      "packageName": "html-css-learn",
      "projectFolder": "apps/html-css-learn",
      "reviewCategory": "production"
    },
    {
      "packageName": "js-learn",
      "projectFolder": "apps/js-learn",
      "reviewCategory": "production"
    },
    {
      "packageName": "react-learn",
      "projectFolder": "apps/react-learn",
      "reviewCategory": "production"
    //   // "subspaceName": "my-subspace",
    //   "reviewCategory": "production",
    //   "decoupledLocalDependencies": [
    //     // "my-toolchain"
    //   ],
    // 
    //   // "skipRushCheck": false,
    // 

    //   // "shouldPublish": false,
    // 
    //   // "publishFolder": "temp/publish",
    // 
    //   /**
    //    * An optional version policy associated with the project.  Version policies are defined
    //    * in "version-policies.json" file.  See the "rush publish" documentation for more info.
    //    * NOTE: "versionPolicyName" and "shouldPublish" are alternatives; you cannot specify them both.
    //    */
    //   // "versionPolicyName": "",
    // 
    //   /**
    //    * An optional set of custom tags that can be used to select this project.  For example,
    //    * adding "my-custom-tag" will allow this project to be selected by the
    //    * command "rush list --only tag:my-custom-tag".  The tag name must be one or more words
    //    * separated by hyphens or slashes, where a word may contain lowercase ASCII letters, digits,
    //    * ".", and "@" characters.
    //    */
    //   // "tags": [ "1.0.0-release", "frontend-team" ]
    },
    // 
    // {
    //   "packageName": "my-controls",
    //   "projectFolder": "libraries/my-controls",
    //   "reviewCategory": "production",
    //   "tags": [ "frontend-team" ]
    // },
    // 
    // {
    //   "packageName": "my-toolchain",
    //   "projectFolder": "tools/my-toolchain",
    //   "reviewCategory": "tools",
    //   "tags": [ "tools" ]
    // }
  ]
}
